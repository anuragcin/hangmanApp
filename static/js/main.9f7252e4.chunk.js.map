{"version":3,"sources":["providers/Hangman/Hangman.context.jsx","components/Hangman/Hangman.jsx","components/Playarea/playarea.component.jsx","App.js","serviceWorker.js","utility/randomwords.js","providers/Hangman/Hangman.provider.jsx","index.js"],"names":["HangmanContext","React","createContext","Hangman","incorrectGuessCount","useContext","containerRef","useRef","canvasRef","drawnPartsRef","previousIncorrectGuessCountRef","useState","size","setSize","hangmanParts","useMemo","bodyHeight","appendageWidth","canvasContext","lineWidth","beginPath","moveTo","lineTo","stroke","arc","Math","PI","getHangmanParts","resizeCanvas","useCallback","style","getComputedStyle","current","containerSize","parseInt","width","resizeCanvasDebounce","debounce","resetCanvas","canvas","getContext","clearRect","height","useEffect","window","addEventListener","removeEventListener","context","slice","forEach","f","drawFn","className","ref","Playarea","generateButtons","atoz","handleGuess","guessed","split","map","ltr","i","key","value","onClick","e","target","disabled","has","guessedWord","answer","playerStatus","this","incorrectMaxGuessCount","incorrectGuesses","handleNewGame","gameOver","isWinner","join","length","letterSpacing","margin","Component","contextType","App","Boolean","location","hostname","match","RANDOM_WORDS","randomWord","floor","random","HangmanProvider","state","Set","Provider","console","log","setState","st","add","includes","props","children","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f7252e4.chunk.js","sourcesContent":["import React from 'react';\n\nconst HangmanContext = React.createContext();\n\nexport default HangmanContext;","import React, { useRef, useEffect, useMemo, useState, useCallback, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { debounce } from 'lodash';\n\nimport './Hangman.css';\nimport HangmanContext from '../../providers/Hangman/Hangman.context'\n\n/**\n * Returns an array of functions that draw each part of the Hangman on the\n * canvas, scaled according to the passed size.\n *\n * @param {Number} size\n */\nconst getHangmanParts = size => {\n  const bodyHeight = size / 2;\n  const appendageWidth = bodyHeight / 3;\n\n  const platform = canvasContext => {\n    canvasContext.lineWidth = 10;\n    canvasContext.beginPath();\n    canvasContext.moveTo(0, size);\n    canvasContext.lineTo(size, size);\n    canvasContext.stroke();\n  };\n\n  const post = canvasContext => {\n    canvasContext.lineWidth = 10;\n    canvasContext.beginPath();\n    canvasContext.moveTo(0, 0);\n    canvasContext.lineTo(0, size);\n    canvasContext.stroke();\n  };\n\n  const pole = canvasContext => {\n    canvasContext.lineWidth = 10;\n    canvasContext.beginPath();\n    canvasContext.moveTo(0, 0);\n    canvasContext.lineTo(size / 2, 0);\n    canvasContext.stroke();\n  };\n\n  const rope = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, 0);\n    canvasContext.lineTo(size / 2, size / 10);\n    canvasContext.stroke();\n  };\n\n  const head = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.arc(size / 2, size / 10 + size / 16, size / 16, 0, Math.PI * 2, true);\n    canvasContext.stroke();\n  };\n\n  const body = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size / 10 + size / 8);\n    canvasContext.lineTo(size / 2, size - bodyHeight);\n    canvasContext.stroke();\n  };\n\n  const leftArm = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size / 3);\n    canvasContext.lineTo(size / 2 - appendageWidth, size / 3);\n    canvasContext.stroke();\n  };\n\n  const rightArm = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size / 3);\n    canvasContext.lineTo(size / 2 + appendageWidth, size / 3);\n    canvasContext.stroke();\n  };\n\n  const leftLeg = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size - bodyHeight);\n    canvasContext.lineTo(size / 2 - appendageWidth, size - bodyHeight + appendageWidth);\n    canvasContext.stroke();\n  };\n\n  const rightLeg = canvasContext => {\n    canvasContext.beginPath();\n    canvasContext.moveTo(size / 2, size - bodyHeight);\n    canvasContext.lineTo(size / 2 + appendageWidth, size - bodyHeight + appendageWidth);\n    canvasContext.stroke();\n  };\n\n  return [platform, post, pole, rope, head, body, leftArm, rightArm, leftLeg, rightLeg];\n};\n\n// Helper function to prepare the canvas for drawing\nconst draw = (canvasContext, drawFn) => {\n  canvasContext.lineWidth = 2; // Reset line width to default\n  drawFn(canvasContext);\n};\n\n// Clears the canvas\nconst clearCanvas = canvas => {\n  const context = canvas.getContext('2d');\n  context.clearRect(0, 0, canvas.width, canvas.height);\n};\n\n/**\n * Draws the \"Hangman\" graphic with parts filled in according to the number of incorrect guesses.\n *\n * For example, to draw the first 5 parts of the hangman:\n *\n * ```javascript\n * <Hangman incorrectGuessCount={5} />\n * ```\n */\nexport const Hangman = () => {\n  // made a change here passing incorrectGuessCount using context instead of props\n  const { incorrectGuessCount } = useContext(HangmanContext);  \n\n  const containerRef = useRef();\n  const canvasRef = useRef();\n  const drawnPartsRef = useRef(0);\n  const previousIncorrectGuessCountRef = useRef(incorrectGuessCount);\n  const [size, setSize] = useState();\n\n  const hangmanParts = useMemo(() => getHangmanParts(size), [size]);\n\n  // Resizes the canvas based on its parent's width\n  const resizeCanvas = useCallback(() => {\n    const style = getComputedStyle(containerRef.current);\n    const containerSize = parseInt(style.width);\n    setSize(containerSize);\n  }, []);\n\n  // Debounced version to use as a resize event listener\n  const resizeCanvasDebounce = useCallback(debounce(resizeCanvas, 50), []);\n\n  // Clears and resets the canvas so parts can be redrawn\n  const resetCanvas = () => {\n    clearCanvas(canvasRef.current);\n    drawnPartsRef.current = 0;\n  };\n\n  // Resize the canvas when the window size changes\n  useEffect(() => {\n    resizeCanvas();\n    window.addEventListener('resize', resizeCanvasDebounce);\n    return () => window.removeEventListener('resize', resizeCanvasDebounce);\n  }, [resizeCanvas, resizeCanvasDebounce]);\n\n  // Reset and redraw whenever canvas size changes\n  useEffect(resetCanvas, [size]);\n\n  // Draw the hangman parts\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const context = canvas.getContext('2d');\n\n    // If the guess count went backward then reset the drawn state\n    if (previousIncorrectGuessCountRef.current > incorrectGuessCount) {\n      resetCanvas();\n    }\n    previousIncorrectGuessCountRef.current = incorrectGuessCount;\n\n    // Draw the relevant part for the number of incorrect guesses\n    const partsToDraw = hangmanParts.slice(drawnPartsRef.current, incorrectGuessCount);\n    partsToDraw.forEach(f => draw(context, f));\n    drawnPartsRef.current = incorrectGuessCount;\n  }, [hangmanParts, incorrectGuessCount]);\n\n  return (\n    <div className=\"Hangman\" ref={containerRef}>\n      <canvas ref={canvasRef} height={size} width={size}></canvas>\n    </div>\n  );\n};\n\nHangman.propTypes = {\n  incorrectGuessCount: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport HangmanContext from '../../providers/Hangman/Hangman.context';\nimport './playarea.css';\nclass Playarea extends Component{\n    static contextType = HangmanContext;\n\n    generateButtons =  (atoz,handleGuess,guessed) => {\n        return atoz.split(\"\").map((ltr,i) => (\n          <button\n            key={i}\n            value={ltr}\n            onClick={(e) => handleGuess(e.target.value)}\n            disabled={guessed.has(ltr)}\n           >\n            {ltr}\n          </button>\n        ));\n      }\n\n      guessedWord = (answer,guessed) => {\n        return answer\n        .split(\"\")\n        .map(ltr => (guessed.has(ltr) ? ltr : \"_\"));\n    }\n\n    render(){\n        const atoz=\"abcdefghijklmnopqrstuvwxyz\"; //a to z letter to input from user..\n        const { incorrectGuessCount, incorrectMaxGuessCount, guessed, answer, incorrectGuesses, handleGuess, handleNewGame  }  = this.context; \n        const gameOver = incorrectGuessCount >= incorrectMaxGuessCount; // when no of wrong letters > total no of wrong letters\n        const isWinner = this.guessedWord(answer,guessed).join(\"\") === answer;  // guessed == answer means winner otherwise loser\n        \n        let playerStatus; // status of player..\n        \n        if (isWinner) playerStatus = \"You Win!\";\n        if (gameOver) playerStatus = \"You Lose!\";\n        \n        return (\n            <>\n            <h1>Playarea..</h1>\n            <h5># of remaining incorrect guesses: { incorrectMaxGuessCount - incorrectGuessCount } , \n                Incorrect letters: { incorrectGuesses.length === 0 ? 'None' : '{'+ incorrectGuesses + '}' } \n                <br/> Player Status: { (isWinner || gameOver) ? playerStatus : '***********'  }\n            </h5>\n            { gameOver || isWinner ? \n                <button onClick={ handleNewGame }>\n                    Start New Game?\n                </button>\n                :null\n            }\n            <p style={{\n                        letterSpacing: '1em',\n                        margin: '0.4em -1em 0.1em 0',\n                        }}\n                        >\n                        { !gameOver ? \n                            this.guessedWord(answer,guessed) \n                            : 'The correct guess: ' + answer}\n                     </p>\n            <p className = \"Playarea-btns\">{ this.generateButtons(atoz,handleGuess,guessed) }</p>\n            </>\n        );\n    }\n}\n\nexport default Playarea;","import React from 'react';\nimport { Hangman } from './components';\nimport Playarea from './components/Playarea/playarea.component'\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1>React Hangman</h1>\n        <Hangman></Hangman>\n        <Playarea></Playarea>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const RANDOM_WORDS = [\n    \"voleer\",\n    \"happy\",\n    \"alpha\",\n    \"beta\",\n    \"delta\",\n    \"gamma\",\n    \"apple\",\n  ];\n  \n  export const randomWord = () => {\n    return RANDOM_WORDS[Math.floor(Math.random() * RANDOM_WORDS.length)];\n  }\n\n  \n  \n","import React, { Component } from 'react';\nimport HangmanContext from './Hangman.context';\nimport { randomWord } from '../../utility/randomwords';\n\n class HangmanProvider extends Component{\n    \n    state = { \n        incorrectGuessCount: 0, \n        incorrectMaxGuessCount:10, \n        guessed: new Set(), \n        incorrectGuesses:[], \n        answer:randomWord(), \n    };\n\n    render() {\n        return(\n            <HangmanContext.Provider value={{\n                incorrectGuessCount:this.state.incorrectGuessCount,\n                incorrectMaxGuessCount:this.state.incorrectMaxGuessCount,\n                guessed:this.state.guessed,\n                incorrectGuesses:this.state.incorrectGuesses,\n                answer:this.state.answer,\n                handleGuess: (e) => {\n                    let ltr = e;\n                    console.log(e);\n                    this.setState(st => ({\n                      guessed: st.guessed.add(e),\n                      incorrectGuessCount: st.incorrectGuessCount + (st.answer.includes(ltr) ? 0 : 1),\n                      incorrectGuesses: !st.answer.includes(ltr)? [...st.incorrectGuesses,ltr]: [...st.incorrectGuesses]\n                    }));\n                },\n                handleNewGame:()=>{\n                    this.setState({\n                        guessed: new Set(),\n                        incorrectGuessCount: 0,\n                        incorrectGuesses:[],\n                        answer: randomWord(),\n                      });\n                } \n             }}>\n                 { this.props.children }\n             </HangmanContext.Provider>\n        );\n    }\n    \n}\n\nexport default HangmanProvider;\n\n\n\n\n\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport HangmanProvider from './providers/Hangman/Hangman.provider';\nReactDOM.render(\n<HangmanProvider>\n    <App />\n</HangmanProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}